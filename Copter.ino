#include <SPI.h>
#include <Gamebuino.h>
Gamebuino gb;



extern const byte font3x3[]; //a really tiny font
extern const byte font3x5[]; //a small but efficient font (default)


const byte Ville1[] PROGMEM = {48,40,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x5,0x80,0x0,0x6,0x0,0x0,0x9,0x40,0x0,0xB,0x0,0x3,0x11,0x20,0x0,0x12,0x80,0x5,0xA1,0x20,0x0,0x22,0x40,0x9,0x41,0x20,0x0,0x42,0x40,0x11,0x25,0x68,0x0,0x42,0x40,0x21,0x19,0x3C,0x0,0x4A,0xC0,0x41,0x11,0x2A,0x0,0x52,0x40,0x45,0x51,0x29,0x0,0x42,0x40,0x49,0x31,0x29,0x0,0x42,0x40,0x51,0x15,0x69,0x0,0x4A,0xC0,0x41,0x19,0x29,0x0,0x52,0x40,0x45,0x51,0x2B,0x0,0x42,0x40,0x49,0x31,0x29,0x0,0x42,0x43,0x51,0x11,0x29,0x0,0x4A,0xC5,0xC1,0x15,0x69,0x0,0x52,0x49,0x45,0x59,0x2B,0x0,0x42,0x51,0x29,0x31,0x29,0x0,0x42,0x61,0x11,0x11,0x29,0x0,0x4A,0xC5,0x51,0x11,0x29,0x0,0x52,0x4D,0x75,0x55,0x6B,0x0,0x42,0x59,0x19,0x39,0x29,0x0,0x42,0x41,0x11,0x11,0x29,0x0,0x4A,0xC1,0x11,0x11,0x29,0x0,0x52,0x45,0x55,0x51,0x2B,0x0,0x42,0x4D,0x79,0x35,0x69,0x0,0x42,0x59,0x11,0x19,0x29,0x0,0x4A,0xC1,0x11,0x11,0x29,0x0,0x52,0x41,0x15,0x51,0x2B,0x0,0x42,0x45,0x59,0x31,0x29,0x0,0x42,0x4D,0x71,0x15,0x69,0x0,0x4A,0xD9,0x11,0x19,0x29,0x0,0x52,0x41,0x15,0x51,0x2B,0x0,0x42,0x41,0x19,0x31,0x29,0x0,0x42,0x5D,0x51,0x15,0x69,0x0,0x42,0x5D,0x71,0x19,0x2B,0x0,0x5A,0x5D,0x15,0x51,0x2B,0x0,0x5A,0x5D,0x15,0x51,0x2B,0x0,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,};
const byte Ville2[] PROGMEM = {48,40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x0,0x0,0x0,0x0,0x0,0xB0,0x0,0x0,0x0,0x0,0x1,0x28,0x0,0x1,0x80,0x0,0x2,0x24,0x0,0x2,0xC0,0x0,0x4,0x24,0x0,0x4,0xA0,0x0,0x8,0xAC,0x0,0x8,0x90,0x0,0x9,0xA4,0x0,0x10,0x90,0x0,0xB,0x24,0x0,0x22,0x90,0x0,0x8,0x24,0x0,0x44,0x9C,0x0,0x8,0xAC,0x0,0x40,0x96,0x0,0x9,0xA4,0x0,0x48,0x95,0x0,0xB,0x24,0x0,0x50,0x94,0x80,0x8,0x24,0x0,0x42,0x96,0x80,0x8,0xAC,0x0,0x44,0x95,0x80,0x9,0xA4,0x0,0x40,0x94,0x80,0xB,0x24,0xC0,0x48,0x94,0x80,0x8,0x25,0x60,0x50,0x96,0x80,0x8,0xAE,0x53,0x42,0x95,0x80,0x9,0xA4,0x4D,0xC4,0x94,0x80,0xA,0xE8,0x49,0x40,0x94,0x80,0xC,0xB1,0x51,0x28,0x96,0x80,0x8,0x92,0x55,0x70,0x95,0x80,0x10,0x88,0x59,0x22,0x94,0x80,0x22,0xA8,0x51,0x24,0x94,0x80,0x26,0xB9,0x51,0x20,0x96,0x80,0x2C,0x8A,0x55,0x68,0x95,0x80,0x20,0x88,0x59,0x30,0x94,0x80,0x20,0x88,0x51,0x22,0x94,0x80,0x22,0xA9,0x51,0x24,0x96,0x80,0x26,0xBA,0x55,0x60,0x95,0x80,0x2C,0x88,0x59,0x28,0x94,0x80,0x20,0x88,0x51,0x30,0x94,0x80,0x20,0x89,0x51,0x22,0x96,0x80,0x22,0xAA,0x55,0x64,0x95,0x80,0x26,0xB8,0x59,0x20,0x94,0x80,0x2C,0x88,0x51,0x28,0x94,0x80,0x20,0x8B,0x51,0x30,0x94,0x80,0x20,0x8B,0x51,0x20,0x94,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,};
const byte Ville3[] PROGMEM = {48,40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x80,0x0,0x0,0x0,0x0,0x3,0x40,0x0,0x0,0x60,0x0,0x5,0x20,0x0,0x0,0xD0,0x0,0x9,0x10,0x0,0x1,0x48,0x0,0x9,0x8,0x0,0x2,0x44,0x0,0xD,0x44,0x0,0x2,0x42,0x0,0x9,0x64,0x0,0x2,0x51,0x0,0x9,0x34,0x0,0xE,0x48,0x80,0x9,0x4,0x0,0x1A,0x40,0x80,0xD,0x44,0x0,0x2A,0x44,0x80,0x9,0x64,0x0,0x4A,0x42,0x80,0x9,0x34,0x0,0x5A,0x50,0x80,0x9,0x4,0x0,0x6A,0x48,0x80,0xD,0x44,0x0,0x4A,0x40,0x80,0x9,0x64,0x0,0x4A,0x44,0x80,0xC9,0x34,0x0,0x5A,0x42,0x81,0xA9,0x4,0x0,0x6A,0x50,0xB2,0x9D,0x44,0x0,0x4A,0x48,0xEC,0x89,0x64,0x0,0x4A,0x40,0xA4,0x85,0xD4,0x0,0x5A,0x45,0x22,0xA3,0x4C,0x0,0x6A,0x43,0xAA,0x92,0x44,0x0,0x4A,0x51,0x26,0x84,0x42,0x0,0x4A,0x49,0x22,0x85,0x51,0x0,0x5A,0x41,0x22,0xA7,0x59,0x0,0x6A,0x45,0xAA,0x94,0x4D,0x0,0x4A,0x43,0x26,0x84,0x41,0x0,0x4A,0x51,0x22,0x84,0x41,0x0,0x5A,0x49,0x22,0xA5,0x51,0x0,0x6A,0x41,0xAA,0x97,0x59,0x0,0x4A,0x45,0x26,0x84,0x4D,0x0,0x4A,0x43,0x22,0x84,0x41,0x0,0x5A,0x51,0x22,0xA4,0x41,0x0,0x6A,0x49,0xAA,0x95,0x51,0x0,0x4A,0x41,0x26,0x87,0x59,0x0,0x4A,0x45,0x22,0x84,0x4D,0x0,0x4A,0x43,0x22,0xB4,0x41,0x0,0x4A,0x41,0x22,0xB4,0x41,0x0,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,};
const byte Ville4[] PROGMEM = {48,40,0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x68,0x0,0x0,0x0,0x0,0x0,0xA4,0x0,0x0,0x18,0x0,0x1,0x22,0x30,0x0,0x34,0x0,0x1,0x21,0x68,0x0,0x52,0x0,0x1,0x20,0xA4,0x0,0x91,0x0,0x5,0xA9,0x22,0x0,0x90,0x80,0xF,0x26,0x21,0x0,0x90,0x80,0x15,0x22,0x20,0x80,0xD4,0x80,0x25,0x22,0xA8,0x80,0x92,0x80,0x25,0x23,0x24,0x80,0x90,0x80,0x25,0xAA,0x22,0x80,0x90,0x80,0x25,0x26,0x20,0x80,0xD4,0x80,0x35,0x22,0xA8,0x80,0x92,0x80,0x25,0x23,0x24,0x80,0x90,0x80,0x25,0x22,0x22,0xB0,0x90,0x80,0x25,0xAA,0x20,0xE8,0xD4,0x80,0x35,0x26,0xA8,0xA4,0x92,0x80,0x25,0x23,0x25,0x22,0x90,0x80,0x25,0x22,0x22,0x21,0x90,0x80,0x25,0x22,0x22,0xA8,0xD4,0x80,0x35,0xAA,0xAB,0xAC,0x92,0x80,0x25,0x27,0x26,0x26,0x90,0x80,0x25,0x22,0x22,0x20,0x90,0x80,0x25,0x22,0x22,0x20,0xD4,0x80,0x35,0x22,0xAA,0xA8,0x92,0x80,0x25,0xAB,0x27,0xAC,0x90,0x80,0x25,0x26,0x22,0x26,0x90,0x80,0x25,0x22,0x22,0x20,0xD4,0x80,0x35,0x22,0xAA,0x20,0x92,0x80,0x25,0x23,0x26,0xA8,0x90,0x80,0x25,0xAA,0x23,0xAC,0x90,0x80,0x25,0x26,0x22,0x26,0xD4,0x80,0x35,0x22,0xAA,0x20,0x92,0x80,0x25,0x23,0x26,0x20,0x90,0x80,0x25,0xAA,0x22,0xAE,0x90,0x80,0x35,0x26,0x23,0xAE,0x90,0x80,0x35,0x22,0xAA,0x2E,0x96,0x80,0x35,0x22,0xAA,0x2E,0x96,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,};
const byte Ville5[] PROGMEM = {48,40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x80,0x0,0x0,0xC,0x0,0x2,0xC0,0x0,0x0,0x14,0x0,0x4,0xA0,0x0,0xE,0x14,0x0,0x8,0x90,0x0,0xB,0x24,0x0,0x10,0x90,0x0,0xB,0xE4,0x0,0x22,0x90,0x0,0x8,0x24,0x0,0x44,0x9C,0x0,0x8,0xAC,0x0,0x40,0x96,0x0,0x9,0xA4,0x0,0x48,0x95,0x0,0xB,0x24,0x0,0x78,0x94,0x80,0x8,0x24,0x0,0xA,0x96,0x80,0x8,0xAC,0x0,0x4,0x95,0x80,0x9,0xA4,0x0,0x2,0x94,0x80,0xB,0x24,0xC0,0x2,0x94,0x80,0x8,0x25,0x60,0x1E,0x96,0x80,0x8,0xAE,0x50,0x32,0x95,0x80,0x9,0xA4,0x58,0x24,0x94,0x80,0xA,0xE8,0x5C,0x20,0x94,0x80,0xC,0xB1,0x52,0x68,0x96,0x80,0x8,0x92,0x56,0xB0,0x95,0x80,0x10,0x88,0x59,0xA2,0x94,0x80,0x22,0xA8,0x50,0xA4,0x94,0x80,0x26,0xB9,0x51,0x20,0x96,0x80,0x2C,0x8A,0x55,0x68,0x95,0x80,0x20,0x88,0x59,0x30,0x94,0x80,0x20,0x88,0x51,0x22,0x94,0x80,0x22,0xA9,0x51,0x24,0x96,0x80,0x26,0xBA,0x55,0x60,0x95,0x80,0x2C,0x88,0x59,0x28,0x94,0x80,0x20,0x88,0x51,0x30,0x94,0x80,0x20,0x89,0x51,0x22,0x96,0x80,0x22,0xAA,0x55,0x64,0x95,0x80,0x26,0xB8,0x59,0x20,0x94,0x80,0x2C,0x88,0x51,0x28,0x94,0x80,0x20,0x8B,0x51,0x30,0x94,0x80,0x20,0x8B,0x51,0x20,0x94,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,};
const byte Ville6[] PROGMEM = {48,40,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x5,0x80,0x0,0x6,0x0,0x0,0x9,0x40,0x0,0xB,0x0,0x3,0x11,0x20,0x0,0x12,0x80,0x5,0xA1,0x20,0x0,0x22,0x40,0x9,0x41,0x60,0x0,0x42,0x40,0x9,0x23,0x80,0x0,0x42,0xC0,0x9,0x1A,0x0,0x0,0x4B,0x80,0x5,0x12,0x0,0x0,0x52,0x0,0x5,0x53,0xC0,0x0,0x42,0x0,0x65,0x31,0x60,0x0,0x42,0x0,0x55,0x15,0x20,0x0,0x4B,0x80,0x59,0x19,0x20,0x0,0x52,0xC0,0x45,0x51,0x20,0x0,0x42,0x40,0x49,0x31,0x30,0x0,0x42,0x40,0x51,0x11,0x28,0x0,0x4A,0xC0,0x41,0x15,0x64,0x0,0x52,0x40,0x45,0x59,0x22,0x0,0x42,0x58,0x69,0x31,0x21,0x0,0x42,0x64,0x51,0x11,0x29,0x0,0x4A,0xC6,0x91,0x11,0x25,0x0,0x52,0x41,0x15,0x55,0x63,0x0,0x42,0x59,0x19,0x39,0x21,0x0,0x42,0x41,0x11,0x11,0x29,0x0,0x4A,0xC1,0x11,0x11,0x25,0x0,0x52,0x45,0x55,0x51,0x23,0x0,0x42,0x4D,0x79,0x35,0x61,0x0,0x42,0x59,0x11,0x19,0x29,0x0,0x4A,0xC1,0x11,0x11,0x25,0x0,0x52,0x41,0x15,0x51,0x23,0x0,0x42,0x45,0x59,0x31,0x21,0x0,0x42,0x4D,0x71,0x15,0x69,0x0,0x4A,0xD9,0x11,0x19,0x25,0x0,0x52,0x41,0x15,0x51,0x23,0x0,0x42,0x41,0x19,0x31,0x21,0x0,0x42,0x5D,0x51,0x15,0x61,0x0,0x42,0x5D,0x71,0x19,0x23,0x0,0x5A,0x5D,0x15,0x51,0x23,0x0,0x5A,0x5D,0x15,0x51,0x23,0x0,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,};
const byte Ville7[] PROGMEM = {48,40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x80,0x0,0x0,0x0,0x0,0x3,0x40,0x0,0x0,0x60,0x0,0x5,0x20,0x0,0x0,0xD0,0x0,0x9,0x10,0x0,0x1,0x48,0x0,0x9,0x8,0x0,0x2,0x48,0x0,0xD,0x44,0x0,0x2,0x50,0x0,0x9,0x64,0x0,0x2,0x51,0x0,0x9,0x34,0x0,0x2,0x4A,0x0,0x9,0x4,0x0,0x2,0x44,0x0,0xD,0x44,0x0,0x2,0x44,0x0,0x9,0x64,0x0,0x2,0x42,0x0,0x9,0x34,0x0,0x2,0x51,0x80,0x9,0x4,0x0,0x2,0x48,0x80,0xD,0x44,0x0,0x2,0x40,0x80,0x9,0x64,0x0,0x2,0x44,0x80,0x9,0x34,0x0,0x2,0x42,0x80,0x9,0x4,0x0,0x2,0x50,0xBE,0xD,0x4,0x0,0x2,0x48,0xE4,0x9,0x24,0x0,0x2,0x40,0xA9,0x9,0x15,0x0,0x2,0x45,0x2A,0xD,0x4F,0x0,0x2,0x43,0xAC,0x1F,0x2D,0x0,0x2,0x51,0x24,0x25,0x11,0x0,0x2,0x49,0x23,0x44,0xA1,0x0,0x2,0x41,0x22,0xA4,0x61,0x0,0x2,0x45,0xAA,0x94,0x41,0x0,0x2,0x43,0x26,0x84,0x41,0x0,0x2,0x51,0x22,0x84,0x41,0x0,0x2,0x49,0x22,0xA5,0x51,0x0,0x12,0x41,0xAA,0x97,0x59,0x0,0x4A,0x45,0x26,0x84,0x4D,0x0,0x66,0x43,0x22,0x84,0x41,0x0,0x5E,0x51,0x22,0xA4,0x41,0x0,0x4A,0x49,0xAA,0x95,0x51,0x0,0x4A,0x41,0x26,0x87,0x59,0x0,0x4A,0x45,0x22,0x84,0x4D,0x0,0x4A,0x43,0x22,0xB4,0x41,0x0,0x4A,0x41,0x22,0xB4,0x41,0x0,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,};
const byte Ville8[] PROGMEM = {48,40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x70,0x0,0x0,0x0,0x0,0x0,0x98,0x0,0x0,0x0,0x0,0x0,0x54,0x0,0x0,0x0,0x0,0x0,0x32,0x0,0x0,0x0,0x0,0x1,0x12,0x0,0x0,0x0,0x3,0x8,0xB2,0x0,0x0,0x0,0x5,0x94,0x52,0x0,0x0,0x0,0x9,0x63,0x93,0x80,0x0,0x0,0x11,0x20,0x13,0x40,0x0,0x0,0x91,0x10,0x15,0x60,0x0,0x0,0xD1,0x8,0x99,0x10,0x0,0x0,0xF5,0x49,0x91,0x20,0x0,0x1,0x99,0x2B,0x21,0x40,0x0,0x2,0x91,0x8,0x25,0x80,0x0,0x4,0x91,0x8,0x29,0x42,0x0,0x0,0x95,0x48,0xA1,0x27,0x0,0x0,0x59,0x29,0xA1,0x2A,0x80,0x0,0x51,0xB,0x25,0x32,0x80,0x0,0xD1,0x8,0x29,0x22,0x80,0x4,0x95,0x48,0x21,0x2A,0x80,0x2,0x99,0x28,0xA1,0x32,0x80,0x1,0xB1,0x9,0x99,0x22,0x80,0x0,0x91,0xB,0x15,0x22,0x80,0x20,0x95,0x48,0x13,0x2A,0x80,0x30,0x99,0x28,0x13,0x32,0x80,0x28,0x51,0x8,0x95,0x22,0x80,0x24,0x51,0x9,0x95,0x22,0x80,0x22,0x95,0x4B,0x39,0x2A,0x80,0x21,0x19,0x28,0x21,0x32,0x80,0x25,0x51,0x8,0x25,0x22,0x80,0x29,0x31,0x8,0xA9,0x22,0x80,0x21,0x15,0x49,0xA1,0x2A,0x80,0x21,0x19,0x2B,0x21,0x32,0x80,0x25,0x51,0x8,0x25,0x22,0x80,0x29,0x31,0x8,0x29,0x22,0x80,0x21,0x11,0x8,0x21,0x22,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,};

//sprite ennemies
const byte Char1[] PROGMEM = {16,8,0x1,0x0,0x0,0xC0,0x3,0xF0,0xFE,0x10,0x2,0x10,0xF,0xF8,0x1A,0x2C,0xF,0xF8,};
const byte Char1C[] PROGMEM = {16,8,0x0,0x0,0x6,0x0,0x9,0x70,0x11,0xD0,0x23,0x10,0x47,0xF8,0x1A,0x2C,0x3F,0xF8,};
const byte Char2[] PROGMEM = {24,10,0x0,0x3C,0x0,0x7F,0xC2,0x0,0x0,0x82,0x0,0xF,0x83,0x80,0x12,0xFD,0x40,0x21,0x2,0x20,0x20,0x0,0x20,0x1F,0xFF,0xC0,0xA,0xAA,0x80,0x7,0xFF,0x0,};
const byte Char2C[] PROGMEM = {24,10,0x0,0x0,0x0,0x1F,0x0,0x0,0x21,0x0,0x0,0x4F,0x85,0x80,0x53,0x4B,0x40,0x21,0x32,0x20,0x20,0x84,0x20,0x1F,0xFF,0xC0,0xA,0xAA,0x80,0x7,0xFF,0x0,};
const byte Halftrack[] PROGMEM = {24,10,0x0,0xA,0x80,0x0,0x5,0x40,0x1,0xFA,0xA0,0x1,0x9,0x50,0x7F,0x8,0xA8,0xC0,0xF7,0xF8,0x7C,0x0,0x18,0x57,0xFF,0xF0,0x28,0x2A,0xA8,0x10,0x1F,0xF0,};
const byte Halftrack1c[] PROGMEM = {24,10,0x1,0x0,0x80,0x62,0x80,0x40,0x5C,0x40,0xA0,0x88,0x20,0x50,0x48,0x40,0x28,0x27,0x80,0xF8,0x3C,0x83,0x18,0x16,0x7F,0xF0,0x2A,0x2A,0xA8,0x11,0x5F,0xF0,};
const byte Halftrack2[] PROGMEM = {24,10,0x7,0xEF,0xF8,0x0,0x5A,0xA8,0x1,0xFD,0x58,0x1,0xA,0xA8,0x7F,0xD,0x58,0xC0,0xF7,0xF8,0x7C,0x0,0x18,0x57,0xFF,0xF0,0x28,0x2A,0xA8,0x10,0x1F,0xF0,};
const byte Halftrack2C[] PROGMEM = {24,10,0x8,0x0,0x78,0x4,0x20,0xA8,0x2,0x51,0x58,0x1,0x9A,0xA8,0xF,0x2D,0x58,0x70,0xF7,0xF8,0x40,0x0,0x18,0xDD,0xFF,0xF0,0x66,0x2A,0xA8,0x44,0x1F,0xF0,};
const byte jeep[] PROGMEM = {16,10,0x20,0x0,0x50,0x0,0xA0,0x0,0x40,0x40,0x44,0x40,0xFC,0x78,0xFF,0xF8,0xAF,0x78,0x50,0xA0,0x20,0x40,};
const byte jeepC[] PROGMEM = {16,10,0x0,0x0,0x0,0x0,0x2,0x0,0xD,0x0,0x12,0x80,0x25,0x0,0xEC,0xE0,0xFF,0xF0,0xAF,0x78,0x70,0xE0,};

const byte HeliPort[] PROGMEM = {24,8,0x80,0x18,0xC0,0xC0,0xC,0x60,0x60,0x6,0x30,0x30,0x8F,0x18,0x18,0xD9,0xC,0xC,0x70,0x6,0x6,0x30,0x3,0x3,0x18,0x1,};

//Explosion ennemies
const byte Explosion1[] PROGMEM = {16,24,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x2,0x66,0x66,0x3F,0xFC,0x2F,0xF4,0x37,0xEC,0x7E,0x7E,0x7C,0x3E,0xFC,0x3F,};
const byte Explosion2[] PROGMEM = {16,24,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0xC0,0xC,0x30,0x1F,0xF8,0x1F,0xF8,0xE,0x70,0x7,0xE0,0xC3,0xC3,0x43,0xC2,0x67,0xE6,0x3F,0xFC,0x33,0xCC,0x21,0x84,0x72,0x4E,0x7C,0x3E,0xFD,0xBF,};
const byte Explosion3[] PROGMEM = {16,24,0x3,0xC0,0x5,0xA0,0x1B,0xD8,0x27,0xE4,0x4F,0xF2,0xDD,0xBB,0xB9,0x9D,0xB7,0xED,0xCB,0xD3,0x73,0xCE,0x3,0xC0,0x3,0xC0,0x3,0xC0,0x3,0xC0,0x3,0xC0,0x3,0xC3,0x83,0xC2,0x43,0xC6,0x6B,0xD4,0x37,0xEC,0x21,0x84,0x73,0xCE,0x7D,0xBE,0xFC,0x3F,};


#define NB_EXPLOSION_ENNEMI 3
#define MAX_LIFE 10

typedef struct {
  byte etat, frequence;
  unsigned int posX;
  byte const * Ex1;
  byte const * Ex2;
  byte const * Ex3;
}
Explosion;
Explosion exEnn = {NB_EXPLOSION_ENNEMI+1,5,0,Explosion1, Explosion2, Explosion3};

#define FRAMERATE 41
#define TIME_TO_REGENERE (FRAMERATE*2)
#define TIME_TO_ENRAYE FRAMERATE
typedef struct {
  int8_t hp,nbClient,offsetCam,timeMitraille,timeRegenere;
  float vx,vy,x, y,angle,angleSprite,etat; //etat < 1 : vise a droite; etat >1   vise au centre ; etat > 2 vise a gauche
  bool dir, dirSprite,mitraille,isEnrayer;
  int impact;
  
}
Copter;


typedef struct {
  int8_t etat;//0 mort, 1 safe , 2 in copter , 3 alive
  int x,tx,y; 
}
Rescape;

#define NB_RESC 33
#define NB_MAX_RESC_IN_COPTER 8
Rescape lesRescape[NB_RESC];
uint8_t cptVictoire;
uint8_t cptDeath;
#define NB_LIFE 2
uint8_t vieRestant = NB_LIFE;

typedef struct {
  uint8_t type;//permet de savoir sur quel sprite on est 0 : heliport,   1 -> 49 bat deco , >49 bat attaque
  unsigned int posX,posY;
  uint8_t height;
  byte const * sprite;
  byte const * spriteDamage;
  int8_t life;
  int8_t cadance;
  int8_t damage;
}
Batiment;

#define GRAVITE 0.025
#define TIME_ALIVE_BOULET 120
#define TIME_ALIVE_MITRAILLE 60

typedef struct {
  int8_t timerAlive;
  int8_t damage,isGravity;
  float x,y, vx,vy; 
}
Missile;
#define V_MISSILE10 200
#define V_MISSILE 2
#define NB_MISSIBLE 10
Missile lesMissiles[NB_MISSIBLE];

#define NB_BAT_LVL 31
Batiment lesBat[NB_BAT_LVL] = {
           {60,500,48,10,jeep,jeepC,127,2,MAX_LIFE},// ennemie anti bug de l'integer negatif ;)
           {0,1010,48,8,HeliPort,HeliPort,10,0,0},
           {50,1200,70,10,jeep,jeepC,5,5,2},
           {51,1110,80,10,Halftrack,Halftrack1c,15,10,3},
           {53,1150,60,8,Char1,Char1C,25,15,6},
           {54,1350,70,10,Char2,Char2C,35,20,7},
           {53,1410,90,8,Char1,Char1C,25,15,6},
           {50,1500,80,10,jeep,jeepC,5,5,2},
           {52,1620,60,10,Halftrack2,Halftrack2C,15,10,3},
           {51,1700,70,10,Halftrack,Halftrack1c,15,10,4},
           {50,1800,60,10,jeep,jeepC,5,5,2},
           {54,1950,90,10,Char2,Char2C,40,20,7},
           {52,2200,60,10,Halftrack2,Halftrack2C,15,10,4},
           {52,2315,120,10,Halftrack2,Halftrack2C,15,10,4},
           {51,2450,60,10,Halftrack,Halftrack1c,15,10,3},
           {53,2575,90,8,Char1,Char1C,25,15,6},
           {54,2650,80,10,Char2,Char2C,35,20,7},
           {53,2780,70,8,Char1,Char1C,25,15,6},
           {50,2800,120,10,jeep,jeepC,5,5,2},
           {52,2850,80,10,Halftrack2,Halftrack2C,15,10,4},
           {51,2880,55,10,Halftrack,Halftrack1c,15,10,3},
           {50,2900,75,10,jeep,jeepC,5,5,2},
           {54,2960,60,10,Char2,Char2C,40,20,7},
           {52,3000,65,10,Halftrack2,Halftrack2C,15,10,4},
           {53,3075,85,8,Char1,Char1C,25,15,6},
           {54,3150,90,10,Char2,Char2C,35,20,7},
           {53,3100,70,8,Char1,Char1C,25,15,6},
           {52,3180,60,10,Halftrack2,Halftrack2C,15,10,4},
           {51,3200,100,10,Halftrack,Halftrack1c,15,10,3},
           {0,3250,48,8,HeliPort,HeliPort,10,0,0},
           {60,6000,48,10,jeep,jeepC,127,2,MAX_LIFE}// ennemie anti bug de l'integer negatif ;)
         };
         
Copter player;

//le fond 
#define NB_FOND 8
byte const * leFond[NB_FOND] = {Ville1,Ville5,Ville3,Ville7,Ville2,Ville8,Ville6,Ville4};

void setup()
{
  gb.begin();
  goTitleScreen();
  gb.setFrameRate(FRAMERATE);
}

void initGame()
{
  gb.battery.show = false;
   for(byte i=0;i<NB_BAT_LVL;i++)
   {
     switch (lesBat[i].type)
     {
       case 50 : 
       lesBat[i].life = 5;
       break;
       case 51 : 
       lesBat[i].life = 15;
       break;
       case 52 : 
       lesBat[i].life = 15;
       break;
       case 53 : 
       lesBat[i].life = 25;
       break;
       case 54 : 
       lesBat[i].life = 35;
       break;
       default : 
       lesBat[i].life = 127;
       
       break;
     }
   }
   vieRestant = 2;
   player.hp = MAX_LIFE;
  player.x=1000;
  cptVictoire= 0;
  cptDeath = 0;
  player.etat=3;
  player.offsetCam = 42;
  
  //TODO aleatoire pour le moment
  for(uint8_t i =0;i<NB_RESC;i++)
  {
     lesRescape[i].etat = 3;
     lesRescape[i].x = random(1100,3100);
     lesRescape[i].y = random(39,44);
     lesRescape[i].tx = lesRescape[i].x;
  }
  for(byte i=0;i<NB_MISSIBLE;i++)
  {
    lesMissiles[i].timerAlive = 0;
  }
}

void loop(){

 if(gb.update())
 {
    if(gb.buttons.pressed(BTN_C)){
      goTitleScreen();
    }
    if((cptVictoire + cptDeath)< NB_RESC && vieRestant>0) 
    {
      updatePlayer();
      updateRescaper();
      updateBatiment();
      updateMissile();
      updateExplosion();
      drawWorld();
      drawMissile();
      drawEnnemies();
      drawPlayer();
      drawRescaper();
      drawExplosion();
      drawHud();
    }
    else 
    {
      winScreen();
    }
 }
 // gameOverScreen();
}

void drawWorld()
{
   gb.display.setColor(GRAY);
   for(int i=0;i<3;i++)
   {
     uint8_t index = ((((int)player.x/42)%8)+i)%8;
     int indexImageX = (42*i)-((int)player.x%42);
     gb.display.drawBitmap( indexImageX,0,leFond[index]);
   }
   
   gb.display.setColor(BLACK);
   gb.display.drawFastHLine(0, 39, 84);
}



const uint8_t soundfx[3][8] = {
    {1,4,113,10,7,19,7,52}, // Explosion{1,0,55,12,7,12,7,13}
    {1,36,12,1,7,0,7,10}, // Mittrailleuse {1,14,24,7,7,0,7,10}
    {0,25,1,1,7,0,7,9},
};

void playsoundfx(uint8_t fxno, uint8_t channel) {
    gb.sound.command(0,soundfx[fxno][6],0,channel);
    // set volume
    gb.sound.command(1,soundfx[fxno][0],0,channel);
    // set waveform
    gb.sound.command(2,soundfx[fxno][5],-soundfx[fxno][4],channel);
    // set volume slide
    gb.sound.command(3,soundfx[fxno][3],soundfx[fxno][2]-58,channel);
    // set pitch slide
    gb.sound.playNote(soundfx[fxno][1],soundfx[fxno][7],channel);
    // play note
}

